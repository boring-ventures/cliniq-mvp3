generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Ensure this is set in your .env file
  directUrl = env("DIRECT_URL")
}

enum RoleEnum {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  RECEPTIONIST
  USER
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  email          String   @unique
  firstName      String?
  lastName       String?
  role           RoleEnum @default(USER)
  isActive       Boolean  @default(true)
  avatarUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Staff-specific fields
  specialty   String?
  dateOfBirth DateTime?
  joinDate    DateTime?
  phone       String?
  address     String?
  notes       String?

  // Relations
  medicalNotes       MedicalNote[]
  auditLogs          AuditLog[]
  appointmentChanges AppointmentChange[]
  usageLogs          UsageLog[]
  invoices           Invoice[]
  workingHours       WorkingHours[]
  emergencyContact   EmergencyContact?
  qualifications     Qualification[]
  documents          StaffDocument[]
  payroll            Payroll?
  doctorAppointments Appointment[] @relation("DoctorAppointments")
}

model Patient {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  email            String?       @unique
  phone            String?
  dateOfBirth      DateTime?
  address          String?
  appointments     Appointment[]
  files            PatientFile[]
  medicalNotes     MedicalNote[]
  invoices         Invoice[]
  medicalHistory   String?       @db.Text
  emergencyContact Json? // Store emergency contact details
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([firstName, lastName])
  @@index([email])
}

model PatientFile {
  id         String   @id @default(uuid())
  patientId  String
  fileUrl    String
  fileType   String?
  uploadedAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
}

model MedicalNote {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  noteText  String
  createdAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Profile @relation(fields: [doctorId], references: [id])
}

model Appointment {
  id          String   @id @default(cuid())
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  doctor      Profile  @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId    String
  scheduledAt DateTime
  duration    Int      @default(30) // in minutes
  status      String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  type        String   // Regular checkup, Emergency, Follow-up, etc.
  reason      String?  @db.Text
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
  @@index([scheduledAt])

  // Relations for tracking changes and follow-ups
  changes   AppointmentChange[]
  reminders AppointmentReminder[]
  followUps FollowUpSchedule[]
}

model AppointmentChange {
  id             String    @id @default(uuid())
  appointmentId  String
  changedBy      String?
  oldScheduledAt DateTime?
  newScheduledAt DateTime?
  changedAt      DateTime  @default(now())
  notes          String?

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        Profile?    @relation(fields: [changedBy], references: [id])
}

model AppointmentReminder {
  id            String    @id @default(uuid())
  appointmentId String
  type          String // 24h_BEFORE, FOLLOWUP, CUSTOM
  message       String
  scheduledFor  DateTime
  sentAt        DateTime?
  status        String    @default("PENDING") // PENDING, SENT
  method        String    @default("WHATSAPP") // WHATSAPP, SMS, EMAIL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model FollowUpSchedule {
  id            String   @id @default(uuid())
  appointmentId String
  scheduledFor  DateTime
  message       String
  status        String   @default("PENDING") // PENDING, SENT, CANCELLED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model InventoryItem {
  id            String    @id @default(uuid())
  name          String
  category      String
  description   String?
  stockQuantity Int       @default(0)
  unit          String    @default("pcs")
  minStock      Int       @default(10)
  supplier      String?
  price         Decimal   @default(0)
  lastRestocked DateTime?
  isCategory    Boolean   @default(false) // Keep this field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  usageLogs      UsageLog[]
  purchaseOrders PurchaseOrderItem[]
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrders PurchaseOrder[]
}

model UsageLog {
  id       String   @id @default(uuid())
  itemId   String
  usedBy   String?
  quantity Int
  usedAt   DateTime @default(now())
  notes    String?

  inventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  user          Profile?      @relation(fields: [usedBy], references: [id])
}

model PurchaseOrder {
  id         String   @id @default(uuid())
  supplierId String?
  orderDate  DateTime @default(now())
  status     String   @default("PENDING") // PENDING, RECEIVED
  notes      String?

  supplier Supplier?           @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String    @id @default(uuid())
  purchaseOrderId String
  itemId          String
  quantity        Int
  receivedDate    DateTime?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  inventoryItem InventoryItem @relation(fields: [itemId], references: [id])
}

model Invoice {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String?
  totalAmount Decimal  @default(0)
  discount    Decimal  @default(0)
  status      String   @default("PENDING") // PENDING, PAID, OVERDUE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient  Patient       @relation(fields: [patientId], references: [id])
  doctor   Profile?      @relation(fields: [doctorId], references: [id])
  items    InvoiceItem[]
  payments Payment[]
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  description String
  amount      Decimal
  quantity    Int     @default(1)

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id         String   @id @default(uuid())
  invoiceId  String
  amountPaid Decimal
  method     String // CREDIT_CARD, CASH, INSURANCE
  paidAt     DateTime @default(now())
  notes      String?

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String // CREATE_USER, UPDATE_INVENTORY, etc.
  description String?
  createdAt   DateTime @default(now())

  user Profile? @relation(fields: [userId], references: [id])
}

// New models for staff functionality

model WorkingHours {
  id        String  @id @default(uuid())
  profileId String
  dayOfWeek String // monday, tuesday, etc.
  startTime String? // Format: "09:00"
  endTime   String? // Format: "17:00"

  profile Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, dayOfWeek])
}

model EmergencyContact {
  id           String  @id @default(uuid())
  profileId    String  @unique
  name         String
  relationship String?
  phone        String

  profile Profile @relation(fields: [profileId], references: [id])
}

model Qualification {
  id          String   @id @default(uuid())
  profileId   String
  degree      String
  institution String
  year        String
  createdAt   DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
}

model StaffDocument {
  id         String   @id @default(uuid())
  profileId  String
  name       String
  fileUrl    String
  fileType   String?
  fileSize   String?
  uploadDate DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
}

model Payroll {
  id               String    @id @default(uuid())
  profileId        String    @unique
  salary           Decimal
  paymentFrequency String // Weekly, Bi-weekly, Monthly
  lastPayment      DateTime?

  // Bank details
  accountName   String?
  accountNumber String?
  bankName      String?

  profile  Profile          @relation(fields: [profileId], references: [id])
  payments PayrollPayment[]
}

model PayrollPayment {
  id        String   @id @default(uuid())
  payrollId String
  amount    Decimal
  paidAt    DateTime @default(now())
  notes     String?

  payroll Payroll @relation(fields: [payrollId], references: [id])
}
