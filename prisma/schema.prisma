generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ensure this is set in your .env file
  directUrl = env("DIRECT_URL")
}

enum RoleEnum {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  RECEPTIONIST
  USER
}

model Profile {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  role           RoleEnum @default(USER)
  isActive       Boolean  @default(true)
  avatarUrl      String?
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  medicalNotes       MedicalNote[]
  appointments       Appointment[]
  auditLogs          AuditLog[]
  appointmentChanges AppointmentChange[]
  usageLogs          UsageLog[]
  invoices           Invoice[]
}

model Patient {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  phone            String?
  emergencyContact String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  appointments Appointment[]
  medicalNotes MedicalNote[]
  invoices     Invoice[]
  patientFiles PatientFile[]
}

model PatientFile {
  id         String   @id @default(uuid())
  patientId  String
  fileUrl    String
  fileType   String?
  uploadedAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
}

model MedicalNote {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  noteText  String
  createdAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Profile @relation(fields: [doctorId], references: [id])
}

model Appointment {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String
  scheduledAt DateTime
  status      String   @default("SCHEDULED") // SCHEDULED, CANCELLED, COMPLETED
  reason      String?
  colorCode   String? // Hex color for doctor
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient             @relation(fields: [patientId], references: [id])
  doctor  Profile             @relation(fields: [doctorId], references: [id])
  changes AppointmentChange[]
}

model AppointmentChange {
  id             String    @id @default(uuid())
  appointmentId  String
  changedBy      String?
  oldScheduledAt DateTime?
  newScheduledAt DateTime?
  changedAt      DateTime  @default(now())
  notes          String?

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        Profile?    @relation(fields: [changedBy], references: [id])
}

model InventoryItem {
  id            String   @id @default(uuid())
  name          String
  category      String? // MEDICATION, TOOL, DISPOSABLE
  description   String?
  stockQuantity Int      @default(0)
  reorderLevel  Int      @default(10) // Low stock alert
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  usageLogs      UsageLog[]
  purchaseOrders PurchaseOrderItem[]
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrders PurchaseOrder[]
}

model UsageLog {
  id       String   @id @default(uuid())
  itemId   String
  usedBy   String?
  quantity Int
  usedAt   DateTime @default(now())
  notes    String?

  inventoryItem InventoryItem @relation(fields: [itemId], references: [id])
  user          Profile?      @relation(fields: [usedBy], references: [id])
}

model PurchaseOrder {
  id         String   @id @default(uuid())
  supplierId String?
  orderDate  DateTime @default(now())
  status     String   @default("PENDING") // PENDING, RECEIVED
  notes      String?

  supplier Supplier?           @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String    @id @default(uuid())
  purchaseOrderId String
  itemId          String
  quantity        Int
  receivedDate    DateTime?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  inventoryItem InventoryItem @relation(fields: [itemId], references: [id])
}

model Invoice {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String?
  totalAmount Decimal  @default(0)
  discount    Decimal  @default(0)
  status      String   @default("PENDING") // PENDING, PAID, OVERDUE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient  Patient       @relation(fields: [patientId], references: [id])
  doctor   Profile?      @relation(fields: [doctorId], references: [id])
  items    InvoiceItem[]
  payments Payment[]
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  description String
  amount      Decimal
  quantity    Int     @default(1)

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id         String   @id @default(uuid())
  invoiceId  String
  amountPaid Decimal
  method     String // CREDIT_CARD, CASH, INSURANCE
  paidAt     DateTime @default(now())
  notes      String?

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String // CREATE_USER, UPDATE_INVENTORY, etc.
  description String?
  createdAt   DateTime @default(now())

  user Profile? @relation(fields: [userId], references: [id])
}
